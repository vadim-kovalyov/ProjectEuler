namespace ProjectEuler

// Problem 1:
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
module Problem1 =

    let multiplesOf3 n = n % 3 = 0
    let multiplesOf5 n = n % 5 = 0

    let filter n = (multiplesOf3 n) || (multiplesOf5 n)

    let problem1 limit =
        [0..limit]
        |> List.filter filter
        |> List.sum

    printfn "Sum of all the multiples of 3 or 5 below 1000 is %d" <| problem1 999


// Problem 2:
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
module Problem2 =
    let fib = 
        let rec fibInner (a) (b) =
            let c = a + b
            seq { yield c; yield! fibInner b c }

        seq { yield 1; yield 2; yield! fibInner 1 2 }

    let problem2 limit = 
        fib
        |> Seq.takeWhile(fun x -> x < limit)
        |> Seq.filter (fun x -> x % 2 = 0)
        |> Seq.sum

    printfn "Sum of the even-valued terms of Fib sequence below 4mil is %A" <| problem2 4000000

// Problem 3:
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?
module Problem3 =

    let sqrt num =
        let firstGuess (num : bigint) = num / 3I;
        let rec converge prevGuess =
            let nextGuess = (num / prevGuess + prevGuess) >>> 1
            match bigint.Abs (prevGuess - nextGuess) with
            | x when x < 2I -> nextGuess
            | _ -> converge nextGuess
        if num < 0I then
            failwith "Square root of a negative number is not defined."
        else
            let root = converge (firstGuess num)
            if root * root > num then
                root - 1I
            else
                root

    let isPrime num =
        match num with
        | n when n = 1I -> true
        | n when n = 2I -> true
        | _ ->
            let squareRoot = sqrt num
            not (
                {2I..squareRoot} |> Seq.exists (fun i -> num % i = 0I)
            )

    let problem3 num =
        let squareRoot = sqrt num
        {squareRoot..(-1I)..2I}
        |> Seq.filter (fun i -> num % i = 0I)
        |> Seq.find (fun i -> isPrime i)

    printfn "Largest prime factor of 13195 is %A" <| problem3 13195I
    printfn "Largest prime factor of 600851475143 is %A" <| problem3 600851475143I

// Problem 4:
// A palindromic number reads the same both ways. The largest palindrome made 
// from the product of two 2-digit numbers is 9009 = 91 × 99.
// Find the largest palindrome made from the product of two 3-digit numbers.
module Problem4 =
    
    let isPalindrome num = 
        let str = string num
        let rev = new string(str.ToCharArray() |> Array.rev)
        str = rev

    let isPalindrome2 num = 
        let str = string num
        let length = str.Length;
        let predicate = fun index -> str.[index] = str.[length - index - 1]
        [|0..(length / 2 - 1)|] |> Array.forall predicate
        

    let threeDigitNumbers = Seq.init 900 ((+) 100)
    
    let products = Seq.merge (*) threeDigitNumbers threeDigitNumbers

    let projection = fun x -> if isPalindrome x then x else 0

    let max = products |> Seq.maxBy projection
    printfn "The largest palindrome is %i" max


// Problem 5:
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
module Problem5 =
    
    let problem5 dividers = 
        
        let sequence = Seq.initInfinite (fun i -> (i + 1) * 20)

        let isDivisible dividers n = 
            dividers 
            |> List.forall (fun i -> n % i = 0)
        
        let predicate = isDivisible dividers
            
        sequence |> Seq.find predicate

    printfn "Result is %i" <| problem5 [1..20]

// Problem 6:
// The sum of the squares of the first ten natural numbers is,
// 12 + 22 + ... + 102 = 385
// The square of the sum of the first ten natural numbers is,
// (1 + 2 + ... + 10)2 = 552 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
module Problem6 =
    
    let problem6 list = 
        let square x = x * x
        let sumOfSquares list = list |> Seq.map square |> Seq.sum
        let squareOfSum list = list |> Seq.sum |> square

        squareOfSum list - sumOfSquares list

    printfn "Result is %i" <| problem6 {1..100}

// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
// What is the 10 001st prime number?
module Problem7 =

    let isPrime n =
        let rec check i =
            i > n/2 || (n % i <> 0 && check (i + 1))
        check 2
        
    let problem7 n = 
        let numbers = Seq.initInfinite (fun i -> i + 2)
        let primes = numbers |> Seq.filter isPrime
        primes |> Seq.item (n - 1)

    printfn "Result is %i" <| problem7 6
    printfn "Result is %i" <| problem7 10001


// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
module Problem8 =
    let thousandDigitNumber = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

    let problem8 substringLength number = 
        let getSubstringsOfLength n (text:string) = 
            let rec take from top =
                if from + top < text.Length then
                    seq { yield text.Substring(from, top);
                        yield! take (from + 1) top }
                else
                    seq { yield text.Substring(from, top) }

            seq { yield! take 0 n }

        let getProduct digits =
            digits
            |> Seq.map string 
            |> Seq.map int 
            |> Seq.map bigint 
            |> Seq.reduce (*)

        number 
        |> getSubstringsOfLength substringLength
        |> Seq.map getProduct
        |> Seq.max

    printfn "%A" <| problem8 4 thousandDigitNumber
    printfn "%A" <| problem8 13 thousandDigitNumber


// A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
//  a2 + b2 = c2
// For example, 32 + 42 = 9 + 16 = 25 = 52.
// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
// Find the product abc.
module Problem9 =

    let problem9 sum = 
        let getTriplets sum = 
            seq {
                for a = 1 to sum do
                    for b = a to sum do
                        for c = b to sum do
                            if a + b + c = sum then
                                yield (a,b,c)
            }

        let triplets = getTriplets sum    
        let a,b,c = triplets |> Seq.find (fun (a,b,c) -> a*a + b*b = c*c)
        a*b*c

    printfn "Result is %A" <| problem9 1000

