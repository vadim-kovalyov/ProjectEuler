namespace ProjectEuler

// Problem 1:
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
module Problem1 =

    let multiplesOf3 n = n % 3 = 0
    let multiplesOf5 n = n % 5 = 0

    let filter n = (multiplesOf3 n) || (multiplesOf5 n)

    let problem1 limit =
        [0..limit]
        |> List.filter filter
        |> List.sum

    printfn "Sum of all the multiples of 3 or 5 below 1000 is %d" (problem1 999)


// Problem 2:
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
module Problem2 =
    let fib = 
        let rec fibInner (a) (b) =
            let c = a + b
            seq { yield c; yield! fibInner b c }

        seq { yield 1; yield 2; yield! fibInner 1 2 }

    let problem2 limit = 
        fib
        |> Seq.takeWhile(fun x -> x < limit)
        |> Seq.filter (fun x -> x % 2 = 0)
        |> Seq.sum

    printfn "Sum of the even-valued terms of Fib sequence below 4mil is %A" (problem2 4000000)

// Problem 3:
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?
module Problem3 =

    let sqrt num =
        let firstGuess (num : bigint) = num / 3I;
        let rec converge prevGuess =
            let nextGuess = (num / prevGuess + prevGuess) >>> 1
            match bigint.Abs (prevGuess - nextGuess) with
            | x when x < 2I -> nextGuess
            | _ -> converge nextGuess
        if num < 0I then
            failwith "Square root of a negative number is not defined."
        else
            let root = converge (firstGuess num)
            if root * root > num then
                root - 1I
            else
                root

    let isPrime num =
        match num with
        | n when n = 1I -> true
        | n when n = 2I -> true
        | _ ->
            let squareRoot = sqrt num
            not (
                {2I..squareRoot} |> Seq.exists (fun i -> num % i = 0I)
            )

    let problem3 num =
        let squareRoot = sqrt num
        {squareRoot..(-1I)..2I}
        |> Seq.filter (fun i -> num % i = 0I)
        |> Seq.find (fun i -> isPrime i)

    printfn "Largest prime factor of 13195 is %A" (problem3 13195I)
    printfn "Largest prime factor of 600851475143 is %A" (problem3 600851475143I)

// Problem 4:
// A palindromic number reads the same both ways. The largest palindrome made 
// from the product of two 2-digit numbers is 9009 = 91 × 99.
// Find the largest palindrome made from the product of two 3-digit numbers.
module Problem4 =
    
    let isPalindrome num = 
        let str = string num
        let rev = new string(str.ToCharArray() |> Array.rev)
        str = rev

    let isPalindrome2 num = 
        let str = string num
        let length = str.Length;
        let predicate = fun index -> str.[index] = str.[length - index - 1]
        [|0..(length / 2 - 1)|] |> Array.forall predicate
        

    let threeDigitNumbers = Seq.init 900 ((+) 100)
    
    let products = Seq.merge (*) threeDigitNumbers threeDigitNumbers

    let projection = fun x -> if isPalindrome x then x else 0

    let max = products |> Seq.maxBy projection
    printfn "The largest palindrome is %i" max


// Problem 5:
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
module Problem5 =
    
    let sequence = Seq.initInfinite (fun i -> (i + 1) * 20)

    let isDivisible dividers n = 
        dividers 
        |> List.forall (fun i -> n % i = 0)

    let predicate = isDivisible [1..20]

    let result = Seq.find predicate sequence

    printfn "Result %i" result